{"remainingRequest":"/Users/lrlbabee/Desktop/CUC/大三下/结课/媒体大数据/fronted/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lrlbabee/Desktop/CUC/大三下/结课/媒体大数据/fronted/src/views/AccordionPage.vue?vue&type=template&id=0f992cad&","dependencies":[{"path":"/Users/lrlbabee/Desktop/CUC/大三下/结课/媒体大数据/fronted/src/views/AccordionPage.vue","mtime":1645116442000},{"path":"/Users/lrlbabee/Desktop/CUC/大三下/结课/媒体大数据/fronted/node_modules/cache-loader/dist/cjs.js","mtime":1686702247989},{"path":"/Users/lrlbabee/Desktop/CUC/大三下/结课/媒体大数据/fronted/node_modules/cache-loader/dist/cjs.js","mtime":1686702247989},{"path":"/Users/lrlbabee/Desktop/CUC/大三下/结课/媒体大数据/fronted/node_modules/babel-loader/lib/index.js","mtime":1686702243633},{"path":"/Users/lrlbabee/Desktop/CUC/大三下/结课/媒体大数据/fronted/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1686702243889},{"path":"/Users/lrlbabee/Desktop/CUC/大三下/结课/媒体大数据/fronted/node_modules/cache-loader/dist/cjs.js","mtime":1686702247989},{"path":"/Users/lrlbabee/Desktop/CUC/大三下/结课/媒体大数据/fronted/node_modules/vue-loader/lib/index.js","mtime":1686702243693}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}