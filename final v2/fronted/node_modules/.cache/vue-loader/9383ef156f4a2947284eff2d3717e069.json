{"remainingRequest":"/Users/zhourui/Desktop/final v2/fronted/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhourui/Desktop/final v2/fronted/src/views/home-pages/BusinessConsulting2.vue?vue&type=template&id=6c067946&","dependencies":[{"path":"/Users/zhourui/Desktop/final v2/fronted/src/views/home-pages/BusinessConsulting2.vue","mtime":1645102820000},{"path":"/Users/zhourui/Desktop/final v2/fronted/node_modules/cache-loader/dist/cjs.js","mtime":1686702247000},{"path":"/Users/zhourui/Desktop/final v2/fronted/node_modules/cache-loader/dist/cjs.js","mtime":1686702247000},{"path":"/Users/zhourui/Desktop/final v2/fronted/node_modules/babel-loader/lib/index.js","mtime":1686702243000},{"path":"/Users/zhourui/Desktop/final v2/fronted/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1686702243000},{"path":"/Users/zhourui/Desktop/final v2/fronted/node_modules/cache-loader/dist/cjs.js","mtime":1686702247000},{"path":"/Users/zhourui/Desktop/final v2/fronted/node_modules/vue-loader/lib/index.js","mtime":1686702243000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}